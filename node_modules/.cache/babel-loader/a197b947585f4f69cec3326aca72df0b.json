{"remainingRequest":"/Users/GSF/GSF/vue-manage/node_modules/babel-loader/lib/index.js!/Users/GSF/GSF/vue-manage/src/utils/http.js","dependencies":[{"path":"/Users/GSF/GSF/vue-manage/src/utils/http.js","mtime":1537243836584},{"path":"/Users/GSF/GSF/vue-manage/node_modules/cache-loader/dist/cjs.js","mtime":1534853418000},{"path":"/Users/GSF/GSF/vue-manage/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["'use strict';\n\nimport axios from 'axios';\nimport qs from 'qs';\naxios.interceptors.request.use(function (config) {\n  // loading\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.resolve(error.response);\n});\n\nfunction checkStatus(response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    return response; // 如果不需要除了data之外的数据，可以直接 return response.data\n  } // 异常状态下，把错误信息返回去\n\n\n  return {\n    status: -404,\n    msg: '网络异常'\n  };\n}\n\nfunction checkCode(res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {\n    console.log(\"请求失败\");\n  }\n\n  if (res.data && !res.data.success) {\n    console.log(\"请求成功\");\n  }\n\n  return res;\n}\n\nexport default {\n  post: function post(url, data) {\n    return axios({\n      method: 'post',\n      baseURL: 'http://localhost:3000',\n      url: url,\n      data: qs.stringify(data),\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (res) {\n      return checkCode(res);\n    });\n  },\n  get: function get(url, params) {\n    return axios({\n      method: 'get',\n      baseURL: 'http://localhost:3000',\n      url: url,\n      params: params,\n      // get 请求时带的参数\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (res) {\n      return checkCode(res);\n    });\n  }\n};",{"version":3,"sources":["src/utils/http.js"],"names":["axios","qs","interceptors","request","use","config","Promise","reject","error","response","resolve","checkStatus","status","msg","checkCode","res","console","log","data","success","post","url","method","baseURL","stringify","timeout","headers","then","get","params"],"mappings":"AAAA;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEAD,MAAME,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,kBAAU;AACvC;AACA,SAAOC,MAAP;AACD,CAHD,EAGG,iBAAS;AACV,SAAOC,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACD,CALD;AAOAR,MAAME,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAAgC,oBAAY;AAC1C,SAAOK,QAAP;AACD,CAFD,EAEG,iBAAS;AACV,SAAOH,QAAQI,OAAR,CAAgBF,MAAMC,QAAtB,CAAP;AACD,CAJD;;AAMA,SAASE,WAAT,CAAsBF,QAAtB,EAAgC;AAC9B;AACA;AACA,MAAIA,aAAaA,SAASG,MAAT,KAAoB,GAApB,IAA2BH,SAASG,MAAT,KAAoB,GAA/C,IAAsDH,SAASG,MAAT,KAAoB,GAAvF,CAAJ,EAAiG;AAC/F,WAAOH,QAAP,CAD+F,CAE/F;AACD,GAN6B,CAO9B;;;AACA,SAAO;AACLG,YAAQ,CAAC,GADJ;AAELC,SAAK;AAFA,GAAP;AAID;;AAED,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB;AACA,MAAIA,IAAIH,MAAJ,KAAe,CAAC,GAApB,EAAyB;AACvBI,YAAQC,GAAR,CAAY,MAAZ;AACD;;AACD,MAAIF,IAAIG,IAAJ,IAAa,CAACH,IAAIG,IAAJ,CAASC,OAA3B,EAAqC;AACnCH,YAAQC,GAAR,CAAY,MAAZ;AACD;;AACD,SAAOF,GAAP;AACD;;AAED,eAAe;AACbK,MADa,gBACPC,GADO,EACFH,IADE,EACI;AACf,WAAOlB,MAAM;AACXsB,cAAQ,MADG;AAEXC,eAAS,uBAFE;AAGXF,cAHW;AAIXH,YAAMjB,GAAGuB,SAAH,CAAaN,IAAb,CAJK;AAKXO,eAAS,KALE;AAMXC,eAAS;AACP,4BAAoB,gBADb;AAEP,wBAAgB;AAFT;AANE,KAAN,EAUJC,IAVI,CAWL,UAAClB,QAAD,EAAc;AACZ,aAAOE,YAAYF,QAAZ,CAAP;AACD,KAbI,EAcLkB,IAdK,CAeL,UAACZ,GAAD,EAAS;AACP,aAAOD,UAAUC,GAAV,CAAP;AACD,KAjBI,CAAP;AAmBD,GArBY;AAsBba,KAtBa,eAsBRP,GAtBQ,EAsBHQ,MAtBG,EAsBK;AAChB,WAAO7B,MAAM;AACXsB,cAAQ,KADG;AAEXC,eAAS,uBAFE;AAGXF,cAHW;AAIXQ,oBAJW;AAIH;AACRJ,eAAS,KALE;AAMXC,eAAS;AACP,4BAAoB;AADb;AANE,KAAN,EASJC,IATI,CAUL,UAAClB,QAAD,EAAc;AACZ,aAAOE,YAAYF,QAAZ,CAAP;AACD,KAZI,EAaLkB,IAbK,CAcL,UAACZ,GAAD,EAAS;AACP,aAAOD,UAAUC,GAAV,CAAP;AACD,KAhBI,CAAP;AAkBD;AAzCY,CAAf","sourceRoot":"/Users/GSF/GSF/vue-manage","sourcesContent":["'use strict'\n\nimport axios from 'axios'\nimport qs from 'qs'\n\naxios.interceptors.request.use(config => {\n  // loading\n  return config\n}, error => {\n  return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n  return response\n}, error => {\n  return Promise.resolve(error.response)\n})\n\nfunction checkStatus (response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    return response\n    // 如果不需要除了data之外的数据，可以直接 return response.data\n  }\n  // 异常状态下，把错误信息返回去\n  return {\n    status: -404,\n    msg: '网络异常'\n  }\n}\n\nfunction checkCode (res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {\n    console.log(\"请求失败\")\n  }\n  if (res.data && (!res.data.success)) {\n    console.log(\"请求成功\")\n  }\n  return res\n}\n\nexport default {\n  post (url, data) {\n    return axios({\n      method: 'post',\n      baseURL: 'http://localhost:3000',\n      url,\n      data: qs.stringify(data),\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      }\n    }).then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    )\n  },\n  get (url, params) {\n    return axios({\n      method: 'get',\n      baseURL: 'http://localhost:3000',\n      url,\n      params, // get 请求时带的参数\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    }).then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    )\n  }\n}\n"]}]}